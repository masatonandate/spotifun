{"version":3,"sources":["FullVinyl6.png","shelf2.png","config.js","hash.js","Visualizer.js","App.js","AlbumImage.js","AppClone.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","authEndpoint","clientId","redirectUri","scopes","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","Visualizer","_ref","image","react_default","a","createElement","className","src","album","images","url","alt","Component","AlbumImage","key","id","name","artists","AppClone","_useState","useState","_useState2","Object","slicedToArray","token","setToken","_useState3","_useState4","albums","setAlbums","useEffect","_token","access_token","console","log","axios","get","params","limit","time_range","headers","Authorization","concat","then","response","data","items","catch","error","Fragment","href","join","map","src_AlbumImage","Boolean","hostname","match","ReactDOM","render","src_AppClone","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b1bf081.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/FullVinyl6.f58fcdc5.png\";","module.exports = __webpack_public_path__ + \"static/media/shelf2.d7b9b7d4.png\";","export const authEndpoint = \"https://accounts.spotify.com/authorize\";\n\n// Replace with your app's client ID, redirect URI and desired scopes\nexport const clientId = \"914bd207fc094241b1b53245a7767a03\";\nexport const redirectUri = \"https://masatonandate.github.io/spotifun/\";\nexport const scopes = [\n    \"user-top-read\",\n    \"user-read-currently-playing\",\n    \"user-read-playback-state\",\n];\n","// Get the hash of the url\nconst hash = window.location.hash\n  .substring(1)\n  .split(\"&\")\n  .reduce(function(initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\nwindow.location.hash = \"\";\n\nexport default hash;\n","import React from 'react'\nconst Visualizer = ({item, image}) => {\n  return (\n    <div className = \"visualizer\">\n      <img src={item.album.images[0].url} className=\"App-logo\" alt=\"logo\" />\n      <img src = {image} className = \"record-player\" alt = \"record player\"/>\n    </div>\n  )\n}\n\nexport default Visualizer;","import React, { Component } from \"react\";\nimport * as $ from \"jquery\";\nimport { authEndpoint, clientId, redirectUri, scopes } from \"./config\";\nimport hash from \"./hash\";\n// import Player from \"./Player\";\nimport Visualizer from \"./Visualizer\";\n// import logo from \"./logo.svg\";\nimport recordplayer from \"./FullVinyl6.png\"\n// import {useState, useEffect} from 'react'\n// import axios from 'axios'\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      token: null,\n      item: {\n        album: {\n          images: [{ url: \"\" }]\n        },\n        name: \"\",\n        artists: [{ name: \"\" }],\n        duration_ms: 0\n      },\n      is_playing: \"Paused\",\n      progress_ms: 0,\n      no_data: false,\n    };\n\n    this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n    this.tick = this.tick.bind(this);\n  }\n\n\n  componentDidMount() {\n    // Set token\n    let _token = hash.access_token;\n\n    if (_token) {\n      // Set token\n      console.log(\"token\", _token)\n      this.setState({\n        token: _token\n      });\n      this.getCurrentlyPlaying(_token);\n    }\n\n    // set interval for polling every 5 seconds\n    this.interval = setInterval(() => this.tick(), 5000);\n  }\n\n  componentWillUnmount() {\n    // clear the interval to save resources\n    clearInterval(this.interval);\n  }\n\n  tick() {\n    if(this.state.token) {\n      this.getCurrentlyPlaying(this.state.token);\n    }\n  }\n\n\n  getCurrentlyPlaying(token) {\n    // Make a call using the token\n    $.ajax({\n      url: \"https://api.spotify.com/v1/me/player\",\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        // Checks if the data is not empty\n        if(!data) {\n          this.setState({\n            no_data: true,\n          });\n          return;\n        }\n\n        this.setState({\n          item: data.item,\n          is_playing: data.is_playing,\n          progress_ms: data.progress_ms,\n          no_data: false /* We need to \"reset\" the boolean, in case the\n                            user does not give F5 and has opened his Spotify. */\n        });\n      }\n    });\n  }\n  // const [albums, setAlbums] = useState([])\n\n  // useEffect((token) => {\n  //   axios\n  //   .get(\"https://api.spotify.com/v1/me/player\", {\n  //     headers: {\n  //       \"Authorization\": \"Bearer \" + token\n  //   }\n  //   }\n  //   .then(response => {\n  //     console.log(response.data)\n  //   })\n\n  //   )\n  // }, [])\n\n  // From here is gonna be just my code\n\n  render() {\n    // const backgroundStyle = {\n    //   background: !this.state.no_data ? `url(${this.state.item.album.images[0].url})` : \"white\",\n    //   filter: `blur(8px)`\n    // }\n    // console.log(backgroundStyle)\n    // const backgroundString = !this.state.no_data ? `url(${this.state.item.album.images[0].url})` : \"white\"\n    // console.log(backgroundString)\n    // console.log(this.state.progress_ms / 1000)\n    // console.log(this.state.item.duration_ms)\n    return (\n      <>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            {!this.state.token && (\n              <>\n                <h1>Spotifun!</h1>\n                <a\n                className=\"btn btn--loginApp-link\"\n                href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n                  \"%20\"\n                )}&response_type=token&show_dialog=true`}\n                >\n                  Login to Spotify\n                </a>\n              </>\n \n            )}\n            {this.state.token && !this.state.no_data && (\n              <>\n              {/* <div>\n                <img src = {this.state.item.album.images[0].url} className = \"wall-paper\" alt = \"wallpaper\"/>\n              </div> */}\n              {/* <div className = \"visualizer\">\n                <img src={this.state.item.album.images[0].url} className=\"App-logo\" alt=\"logo\" />\n                <img src = {recordplayer} className = \"record-player\" alt = \"record player image\"/>\n              </div> */}\n              <Visualizer item = {this.state.item} image = {recordplayer}/>\n              </>\n            )}\n            {this.state.no_data && (\n              <p>\n                You need to be playing a song on Spotify, for something to appear here.\n              </p>\n            )}\n          </header>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react'\n\nconst AlbumImage = ({album}) => {\n  return (\n    <div className = \"Image-Holder\">\n      <img key = {album.id} src = {album.album.images[0].url} className = \"Album-Image\" alt = \"album\"/>\n      <div className = \"Song-Details\">\n        <h4>{album.name}</h4>\n        <p>{album.album.artists[0].name}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default AlbumImage;","import React from \"react\"\nimport {useState, useEffect} from \"react\";\n// import * as $ from \"jquery\";\nimport { authEndpoint, clientId, redirectUri, scopes } from \"./config\";\nimport hash from \"./hash\";\n// import Player from \"./Player\";\n// import Visualizer from \"./Visualizer\";\n// import logo from \"./logo.svg\";\n// import recordplayer from \"./FullVinyl6.png\"\nimport axios from 'axios'\nimport AlbumImage from \"./AlbumImage\";\nimport WoodenShelf from \"./shelf2.png\"\nimport \"./App.css\";\n\nconst AppClone = () => {\n  //all the states\n  const [token, setToken] = useState(null)\n  const [albums, setAlbums] = useState([])\n  // const [is_playing, setIs_playing] = useState(\"Paused\")\n  // const [progress_ms, setProgress_ms] = useState(0)\n  // const [noData, setNoData] = useState(false)\n\n  //useEffect calls\n  useEffect(() => {\n    let _token = hash.access_token\n    if(_token) {\n      setToken(_token)\n      console.log(\"token\", token)\n    }\n  })\n\n  useEffect(() => \n  {\n    console.log(\"inEffect\")\n    console.log(\"token in access\", token)\n    if(token)\n    {\n      console.log(\"in-branch\")\n      axios\n      .get(\"https://api.spotify.com/v1/me/top/tracks\", {\n        params: {\n          limit: 9,\n          time_range: \"short_term\"\n        },\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      })\n      .then(response => {\n        console.log(\"response happened\", response.data)\n        setAlbums(response.data.items)\n        console.log(albums)\n      })\n      .catch(error => {\n        console.log(\"getting player\", error)\n      })\n    }\n  }, [token])\n\n\n  return (\n    <>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {!token && (\n          <a\n            className=\"btn btn--loginApp-link\"\n            href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n              \"%20\"\n            )}&response_type=token&show_dialog=true`}\n          >\n            Login to Spotify\n          </a>\n        )}\n        {token && albums &&(\n          <>\n          {/* <h1>Top Played Songs in the Last 4 Weeks</h1> */}\n          {/* <div className = \"Shelf-Container\">\n            <img className = \"woodenShelfone\" src = {WoodenShelf} alt = \"shelf\"/>\n            {/* <img className = \"woodenShelftwo\" src = {WoodenShelf} alt = \"shelf\"/>\n            <img className = \"woodenShelfthree\" src = {WoodenShelf} alt = \"shelf\"/>}\n          </div> */}\n          {/* <img className = \"woodenShelfone\" src = {WoodenShelf} alt = \"shelf\"/> */}\n          <div className = \"Album-Grid\">\n            {albums.map(album => \n              {\n                console.log(album)\n                return (\n                  <AlbumImage album = {album}/>\n                )\n              }\n            )\n            }\n          </div>\n\n          </>\n        )}\n        {/* {this.state.no_data && (\n          <p>\n            You need to be playing a song on Spotify, for something to appear here.\n          </p>\n        )} */}\n      </header>\n    </div>\n  </>\n  )\n}\n\nexport default AppClone;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport AppClone from './AppClone';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppClone />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}