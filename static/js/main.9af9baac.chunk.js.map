{"version":3,"sources":["FullVinyl8.png","shelf2.png","config.js","hash.js","Visualizer.jsx","App.js","AppClone.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","authEndpoint","clientId","redirectUri","scopes","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","Visualizer","_ref","playing","color","progress","visualizationClass","colortwo","palette","colorthree","document","body","style","backgroundImage","concat","progvalue","react_default","a","createElement","Fragment","className","name","artists","background","src","album","images","url","alt","opacity","transform","Component","AppClone","_useState","useState","_useState2","Object","slicedToArray","token","setToken","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","is_playing","setIs_playing","_useState9","_useState10","progress_ms","setProgress_ms","_useState11","_useState12","noData","setNoData","_useState13","duration_ms","_useState14","setItem","_useState15","_useState16","colors","setColors","_useState17","_useState18","newsong","setNewSong","_useState19","_useState20","setVolume","useEffect","_token","access_token","console","log","getCurrentlyPlaying","asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","axios","get","headers","Authorization","then","response","data","device","volume_percent","stop","apply","this","arguments","interval","setInterval","clearInterval","X-RapidAPI-Key","process","X-RapidAPI-Host","href","join","src_Visualizer","target","rel","Boolean","hostname","match","ReactDOM","render","src_AppClone","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9af9baac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/FullVinyl8.7fc9e476.png\";","module.exports = __webpack_public_path__ + \"static/media/shelf2.d7b9b7d4.png\";","export const authEndpoint = \"https://accounts.spotify.com/authorize\";\n\n// Replace with your app's client ID, redirect URI and desired scopes\nexport const clientId = \"914bd207fc094241b1b53245a7767a03\";\nexport const redirectUri = \"https://masatonandate.github.io/spotifun/\";\n//export const redirectUri = \"http://localhost:3000/redirect/\";\nexport const scopes = [\n    \"user-top-read\",\n    \"user-read-currently-playing\",\n    \"user-read-playback-state\",\n    \"user-read-private\"\n];\n","// Get the hash of the url\nconst hash = window.location.hash\n  .substring(1)\n  .split(\"&\")\n  .reduce(function(initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\nwindow.location.hash = \"\";\n\nexport default hash;\n","import React from 'react';\nimport Draggable from 'react-draggable';\nimport {useState, useEffect} from 'react';\nconst Visualizer = ({item, playing, color, progress}) => {\n  let visualizationClass = playing === true ? \"album-cover-animated\" : \"album-cover-stagnant\";\n  let colortwo = (color[0].palette[0] !== color[0].palette[1] && color[0].palette[1] !== color[0].palette[2]) ? color[0].palette[1] : \"white\";\n  let colorthree = (color[0].palette[1] !== color[0].palette[2] && color[0].palette[2] !== color[0].palette[0]) ? color[0].palette[2] : \"black\";\n  // console.log(\"one\", color[0].palette[0])\n  // console.log(\"two\", colortwo)\n  // console.log(\"three\", colorthree)\n\n  document.body.style.backgroundImage = `linear-gradient(-45deg, ${color[0].palette[0]}, ${color[0].palette[1]})`;\n  // const[position, setPositon] = useState({x:0,y:0})\n  // const trackPos = (data) => {\n  //   setPositon({x: data.x, y: data.y})\n  //   console.log(position)\n  // }\n\n  let progvalue = (progress) * (-22) + 16\n\n\n\n  return (\n    <>\n    {/* <div className = \"visualizer\">\n     <img src={item.album.images[0].url} className={visualizationClass} alt=\"album\" />\n      <img src = {image} className = \"record-player\" alt = \"record player\"/>\n     </div> */}\n      <div className = \"name-and-artist\" style = {{color: colorthree}}>\n          <h1>{item.name}</h1>\n          <h3>{item.artists[0].name}</h3>\n      </div>\n      <div className = \"record-player\">\n        <div className = \"rectangle\" style = {{background: color[0].palette[0]}}>\n        </div>\n        <img className = {visualizationClass} src = {item.album.images[0].url} alt = \"album\"/>\n        <div className = \"disk\">\n        </div>\n        <div className = \"inner-disk-one\" style = {{opacity: \"80%\"}}>\n        </div>\n        <div className = \"inner-disk-two\">\n        </div>\n        <div className = \"volume-bar\">\n        </div>\n        {/* <Draggable axis = \"y\" bounds = {{bottom: 101, top: -51}} onDrag = {(e,data) => trackPos(data)}>\n          <div className='box'>\n            <div className = \"volume-slider\" style = {{background: color[0].palette[1]}}>\n            </div>\n          </div>\n        </Draggable> */}\n        <div className = \"volume-slider\" style = {{background: colortwo, transform: `translate(25vmin,${progvalue}vmin)`}}>\n        </div>\n        <div className = \"pin-base\" style = {{background: colortwo}}>\n        </div>\n        <div className = \"pin-hand-one\">\n        </div>\n        <div className = \"pin-hand-two\">\n        </div>\n        <div className = \"pin-needle\" style = {{background: colortwo}}>\n        </div>\n      </div>\n\n    </>\n\n    )\n}\n\nexport default Visualizer;","import React, { Component } from \"react\";\nimport * as $ from \"jquery\";\nimport { authEndpoint, clientId, redirectUri, scopes } from \"./config\";\nimport hash from \"./hash\";\n// import Player from \"./Player\";\nimport Visualizer from \"./Visualizer.jsx\";\n// import logo from \"./logo.svg\";\nimport recordplayer from \"./FullVinyl8.png\"\n// import {useState, useEffect} from 'react'\n// import axios from 'axios'\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      token: null,\n      item: {\n        album: {\n          images: [{ url: \"\" }]\n        },\n        name: \"\",\n        artists: [{ name: \"\" }],\n        duration_ms: 0\n      },\n      is_playing: \"Paused\",\n      progress_ms: 0,\n      no_data: false,\n    };\n\n    this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n    this.tick = this.tick.bind(this);\n  }\n\n\n  componentDidMount() {\n    // Set token\n    let _token = hash.access_token;\n\n    if (_token) {\n      // Set token\n      console.log(\"token\", _token)\n      this.setState({\n        token: _token\n      });\n      this.getCurrentlyPlaying(_token);\n    }\n\n    // set interval for polling every 5 seconds\n    this.interval = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    // clear the interval to save resources\n    clearInterval(this.interval);\n  }\n\n  tick() {\n    if(this.state.token) {\n      this.getCurrentlyPlaying(this.state.token);\n    }\n  }\n\n\n  getCurrentlyPlaying(token) {\n    // Make a call using the token\n    $.ajax({\n      url: \"https://api.spotify.com/v1/me/player\",\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        // Checks if the data is not empty\n        if(!data) {\n          this.setState({\n            no_data: true,\n          });\n          return;\n        }\n\n        this.setState({\n          item: data.item,\n          is_playing: data.is_playing,\n          progress_ms: data.progress_ms,\n          no_data: false /* We need to \"reset\" the boolean, in case the\n                            user does not give F5 and has opened his Spotify. */\n        });\n      }\n    });\n  }\n  // const [albums, setAlbums] = useState([])\n\n  // useEffect((token) => {\n  //   axios\n  //   .get(\"https://api.spotify.com/v1/me/player\", {\n  //     headers: {\n  //       \"Authorization\": \"Bearer \" + token\n  //   }\n  //   }\n  //   .then(response => {\n  //     console.log(response.data)\n  //   })\n\n  //   )\n  // }, [])\n\n  // From here is gonna be just my code\n\n  render() {\n    // const backgroundStyle = {\n    //   background: !this.state.no_data ? `url(${this.state.item.album.images[0].url})` : \"white\",\n    //   filter: `blur(8px)`\n    // }\n    // console.log(backgroundStyle)\n    // const backgroundString = !this.state.no_data ? `url(${this.state.item.album.images[0].url})` : \"white\"\n    // console.log(backgroundString)\n    // console.log(this.state.progress_ms / 1000)\n    // console.log(this.state.item.duration_ms)\n    return (\n      <>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            {!this.state.token && (\n              <>\n                <div className = \"Main-Title\">\n                  <h1 class = \"Main-Title-Name\">Spotifun!</h1>\n                </div>\n                <a\n                className=\"btn btn--loginApp-link\"\n                href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n                  \"%20\"\n                )}&response_type=token&show_dialog=true`}\n                >\n                  Login to Spotify\n                </a>\n              </>\n \n            )}\n          </header>\n            {this.state.token && !this.state.no_data && (\n              <>\n              {/* <div>\n                <img src = {this.state.item.album.images[0].url} className = \"wall-paper\" alt = \"wallpaper\"/>\n              </div> */}\n              {/* <div className = \"visualizer\">\n                <img src={this.state.item.album.images[0].url} className=\"App-logo\" alt=\"logo\" />\n                <img src = {recordplayer} className = \"record-player\" alt = \"record player image\"/>\n              </div> */}\n              <Visualizer item = {this.state.item} image = {recordplayer} playing = {this.state.is_playing}/>\n              </>\n            )}\n            {this.state.no_data && (\n              <p>\n                You need to be playing a song on Spotify, for something to appear here.\n              </p>\n            )}\n        </div>\n        <p className = \"Main-Subcaption\">Developed by <a href = \"https://masatonandate.github.io/masato_website/index.html\" target = \"_blank\" rel = \"noopener noreferrer\">Masato Nandate </a></p>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\"\nimport {useState, useEffect} from \"react\";\n// import * as $ from \"jquery\";\nimport { authEndpoint, clientId, redirectUri, scopes } from \"./config\";\nimport hash from \"./hash\";\n// import Player from \"./Player\";\n// import Visualizer from \"./Visualizer\";\n// import logo from \"./logo.svg\";\n// import recordplayer from \"./FullVinyl6.png\"\nimport axios from 'axios'\nimport AlbumImage from \"./AlbumImage\";\nimport WoodenShelf from \"./shelf2.png\"\nimport \"./App.css\";\nimport Visualizer from \"./Visualizer.jsx\";\nimport Draggable from \"react-draggable\";\n\nconst AppClone = () => {\n  //all the states\n  const [token, setToken] = useState(null)\n  const [albums, setAlbums] = useState([])\n  const [me, setMe] = useState(null)\n  const [is_playing, setIs_playing] = useState(\"false\")\n  const [progress_ms, setProgress_ms] = useState(0)\n  const [noData, setNoData] = useState(true)\n  const [item, setItem] = useState(\n    {\n      album: {\n        images: [{ url: \"\" }]\n      },\n      name: \"\",\n      artists: [{ name: \"\" }],\n      duration_ms: 0\n    }\n  )\n  const [colors, setColors] = useState(null)\n  const [newsong, setNewSong] = useState(null)\n  const [volume, setVolume] = useState(0)\n\n  //useEffect calls\n  //useEffect to get token\n  useEffect(() => {\n    let _token = hash.access_token\n    if(_token) {\n      setToken(_token)\n      console.log(\"token\", token)\n    }\n  })\n\n  //useEffect to get top tracks\n  // useEffect(() => \n  // {\n  //   // console.log(\"inEffect\")\n  //   // console.log(\"token in access\", token)\n  //   if(token)\n  //   {\n  //     // console.log(\"in-branch\")\n  //     axios\n  //     .get(\"https://api.spotify.com/v1/me/top/tracks\", {\n  //       params: {\n  //         limit: 9,\n  //         time_range: \"medium_term\"\n  //       },\n  //       headers: {\n  //         \"Authorization\": `Bearer ${token}`\n  //       }\n  //     })\n  //     .then(response => {\n  //       // console.log(\"response happened\", response.data)\n  //       setAlbums(response.data.items)\n  //       // console.log(albums)\n  //     })\n  //     .catch(error => {\n  //       // console.log(\"getting player\", error)\n  //     })\n  //   }\n  // }, [token])\n  \n  //useEffect to get name of user\n  // useEffect(() => \n  // {\n  //   if(token)\n  //   {\n  //     // console.log(\"in-branch\")\n  //     axios\n  //     .get(\"https://api.spotify.com/v1/me\", {\n  //       headers: {\n  //         \"Authorization\": `Bearer ${token}`\n  //       }\n  //     })\n  //     .then(response => {\n  //       // console.log(\"response happened\", response.data)\n  //       setMe(response.data)\n  //       // console.log(me)\n  //     })\n  //     .catch(error => {\n  //       // console.log(\"getting player\", error)\n  //     })\n  //   }\n  // }, [token])\n\n  //useEffect to get currently playing track\n  const getCurrentlyPlaying = async() => {\n    if(token)\n    {\n      console.log(\"in-player-branch\")\n      axios.get(\"https://api.spotify.com/v1/me/player\", {\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      })\n      .then(response => {\n        console.log(\"response happened for player\", response)\n        if(response.data)\n        {\n          setItem(response.data.item)\n          setIs_playing(response.data.is_playing)\n          setProgress_ms(response.data.progress_ms)\n          setNoData(false)\n          setVolume(response.data.device.volume_percent)\n          if(response.data.item.name !== newsong)\n          {\n            setNewSong(response.data.item.name)\n          }\n        }\n      }\n      )\n    }\n  }\n\n  useEffect(() => {\n    getCurrentlyPlaying()\n    const interval = setInterval(getCurrentlyPlaying, 1000)\n    return() => clearInterval(interval)\n  }, [token])\n\n  //how to get color\n  useEffect(() => {\n    let APIKEY = process.env.REACT_APP_NEXT_PUBLIC_RAPIDAPI_KEY;\n    // const data = {\n    //   model: \"default\"\n    // }\n    axios.get(\"https://random-palette-generator.p.rapidapi.com/palette/Complementary/1/3\", {\n      headers: {\n        'X-RapidAPI-Key': `${APIKEY}`,\n        'X-RapidAPI-Host': 'random-palette-generator.p.rapidapi.com'\n      }\n    }\n    )\n    // axios.post(\"http://colormind.io/api/\", {body: JSON.stringify(data)})\n    .then(response => {\n      setColors(response.data.data)\n    })\n  }, [newsong])\n\n  //useEffect to get colors\n\n  return (\n    <>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {!token && (\n          <a\n            className=\"btn btn--loginApp-link\"\n            href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n              \"%20\"\n            )}&response_type=token&show_dialog=true`}\n          >\n            Login to Spotify\n          </a>\n        )}\n        {token && !noData && colors &&(\n          <>\n          {/* <h1>Top Played Songs in the Last 4 Weeks</h1> */}\n          {/* <div className = \"Shelf-Container\">\n            <img className = \"woodenShelfone\" src = {WoodenShelf} alt = \"shelf\"/>\n            {/* <img className = \"woodenShelftwo\" src = {WoodenShelf} alt = \"shelf\"/>\n            <img className = \"woodenShelfthree\" src = {WoodenShelf} alt = \"shelf\"/>}\n          </div> */}\n          {/* <img className = \"woodenShelfone\" src = {WoodenShelf} alt = \"shelf\"/> */}\n          {/* <h1>Songs Stuck in {me.display_name}'s Ear</h1>\n          <div className = \"Album-Grid\">\n            {albums.map(album => \n              {\n                return (\n                  <AlbumImage album = {album}/>\n                )\n              }\n            )\n            }\n          </div> */}\n          <Visualizer item = {item} playing = {is_playing} color = {colors} progress = {progress_ms / item.duration_ms}/>\n          </>\n        )}\n        {noData && token &&(\n          <p>\n            You need to be playing a song on Spotify, for something to appear here.\n          </p>\n        )}\n      </header>\n    </div>\n    <p className = \"Main-Subcaption\">Developed by <a href = \"https://masatonandate.github.io/masato_website/index.html\" target = \"_blank\" rel = \"noopener noreferrer\">Masato</a></p>\n  </>\n  )\n}\n\nexport default AppClone;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css'\nimport App from './App';\nimport AppClone from './AppClone';\nimport Draggable from 'react-draggable';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppClone />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}